/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author Venkat Suprabath
 */
public class OrderPlace extends javax.swing.JFrame {

    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL1 = "jdbc:mysql://localhost:3306/supermarket";
    static final String DB_URL2 = "jdbc:mysql://localhost:3306/orders";
    static final String USER = "root";
    static final String PASS = "venkatrao";
    /**
     * Creates new form OrderPlace
     */
    public OrderPlace() {
        initComponents();
        DefaultTableModel model = (DefaultTableModel) TItems.getModel();
        try{
            Class.forName(JDBC_DRIVER);
            Connection con = DriverManager.getConnection(DB_URL1, USER, PASS);
            Statement stmt= (Statement)con.createStatement();
            String query = "SELECT * FROM items;";
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()){
                String item_name = rs.getString(2);
                int item_code = rs.getInt(1);
                int price = rs.getInt(3);
                int discount = rs.getInt(4);
                int stock = rs.getInt(5);
                model.addRow(new Object[] {item_code, item_name, price, discount, stock});
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Connection Failed!");
        }
    }   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        RBItemID = new javax.swing.JRadioButton();
        RBItemName = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TItems = new javax.swing.JTable();
        BOrder = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TOrders = new javax.swing.JTable();
        BPlaceOrder = new javax.swing.JButton();
        TFSearch = new javax.swing.JTextField();
        BRemove = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        BBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        TFQuantity = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(665, 843));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Search Using:");

        buttonGroup.add(RBItemID);
        RBItemID.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        RBItemID.setText("Item ID");

        buttonGroup.add(RBItemName);
        RBItemName.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        RBItemName.setSelected(true);
        RBItemName.setText("Item Name");

        TItems.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Price", "Discount", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TItems);

        BOrder.setText("ORDER");
        BOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BOrderActionPerformed(evt);
            }
        });

        TOrders.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Price", "Discount", "Quantity", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TOrders);

        BPlaceOrder.setText("PLACE ORDER");
        BPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPlaceOrderActionPerformed(evt);
            }
        });

        TFSearch.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        TFSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFSearchFocusGained(evt);
            }
        });
        TFSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TFSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TFSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TFSearchKeyTyped(evt);
            }
        });

        BRemove.setText("REMOVE");
        BRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRemoveActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("NILE");

        BBack.setText("< BACK");
        BBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBackActionPerformed(evt);
            }
        });

        jLabel3.setText("Quantity: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BBack))
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(RBItemID)
                .addGap(18, 18, 18)
                .addComponent(RBItemName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TFSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BPlaceOrder)
                .addGap(282, 282, 282))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(TFQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BOrder)
                .addGap(69, 69, 69)
                .addComponent(BRemove)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addComponent(BBack))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RBItemID)
                    .addComponent(RBItemName)
                    .addComponent(jLabel1)
                    .addComponent(TFSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(TFQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BPlaceOrder)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BOrderActionPerformed
        TableModel model1 = TItems.getModel();
        DefaultTableModel model2 = (DefaultTableModel) TOrders.getModel();
        int[] indexes = TItems.getSelectedRows();
        Object[] row = new Object[6];
        for(int i = 0; i < indexes.length; i++){
            row[0] = model1.getValueAt(indexes[i], 0);
            row[1] = model1.getValueAt(indexes[i], 1);
            row[2] = model1.getValueAt(indexes[i], 2);
            row[3] = model1.getValueAt(indexes[i], 3);
            row[4] = Integer.parseInt(TFQuantity.getText());
            row[5] = ((int)row[4]*(int)row[2])*(1 - ((int)row[3]/100));
            model2.addRow(row);
        }

    }//GEN-LAST:event_BOrderActionPerformed

    private void TFSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFSearchFocusGained

    }//GEN-LAST:event_TFSearchFocusGained

    private void TFSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFSearchKeyPressed

    }//GEN-LAST:event_TFSearchKeyPressed

    private void TFSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFSearchKeyReleased
        DefaultTableModel model = (DefaultTableModel) TItems.getModel();
        model.setRowCount(0);
        try{
            Class.forName(JDBC_DRIVER);
            Connection con = DriverManager.getConnection(DB_URL1, USER, PASS);
            Statement stmt= (Statement)con.createStatement();
            String search = TFSearch.getText();
            String query;
            if(RBItemID.isSelected()){
                query = "SELECT * FROM items WHERE item_id like '"+search+"%';";
            }else{
                query = "SELECT * FROM items WHERE item_name like '"+search+"%';";
            }
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()){
                String item_name = rs.getString(2);
                int item_code = rs.getInt(1);
                int price = rs.getInt(3);
                int discount = rs.getInt(4);
                int stock = rs.getInt(5);
                model.addRow(new Object[] {item_code, item_name, price, discount, stock});
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Connection Failed!");
        }
    }//GEN-LAST:event_TFSearchKeyReleased

    private void TFSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFSearchKeyTyped

    }//GEN-LAST:event_TFSearchKeyTyped

    private void BRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRemoveActionPerformed
        DefaultTableModel model = (DefaultTableModel) TOrders.getModel();
        int index = TOrders.getSelectedRow();
        model.removeRow(index);
    }//GEN-LAST:event_BRemoveActionPerformed

    private void BPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPlaceOrderActionPerformed
        try{
            Class.forName(JDBC_DRIVER);
            Connection con1 = DriverManager.getConnection(DB_URL1, USER, PASS);
            Connection con2 = DriverManager.getConnection(DB_URL2, USER, PASS);
            Statement stmt1= (Statement)con1.createStatement();
            Statement stmt2= (Statement)con2.createStatement();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            String date = LocalDateTime.now().format(formatter);
            String query1 = "INSERT INTO orders(username, order_date, status) VALUES('"+LoginForm.TFUserLogin.getText()+"','"+date+"','PENDING');";
            stmt1.executeUpdate(query1);
            DefaultTableModel model =(DefaultTableModel) TOrders.getModel();
            String query2 = "SELECT count(*) FROM orders;";
            ResultSet rs = stmt1.executeQuery(query2);
            int count = 0;
            while(rs.next()){
                count = rs.getInt(1);
            }
            System.out.println(count);
            String tablename = "O"+String.valueOf(count);
            String query3 = "CREATE TABLE "+tablename+"(item_id int, item_name varchar(250), price int, discount int, quantity int, amount int);";
            stmt2.executeUpdate(query3);
            int sum = 0;
            for(int i = 0; i < model.getRowCount(); i++){
                Object[] rowData = new Object[model.getColumnCount()];
                for(int j = 0; j < model.getColumnCount(); j++){
                    rowData[j] = model.getValueAt(i, j);
                }
                sum += (int)rowData[5];
                String query4 = "INSERT INTO "+tablename+" VALUES('"+rowData[0]+"','"+rowData[1]+"',"+rowData[2]+","+rowData[3]+","+rowData[4]+","+rowData[5]+");";
                stmt2.executeUpdate(query4);
            }
            JOptionPane.showMessageDialog(null, "Order has been placed. Waiting for approval!\n Order Placement Amount: "+ String.valueOf(sum));
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Connection Failed!");
        }
    }//GEN-LAST:event_BPlaceOrderActionPerformed

    private void BBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBackActionPerformed
        if(LoginForm.LUserStatus.getText().equals("U")){
            MenuPage frame = new MenuPage();
            frame.setVisible(true);
            this.setVisible(false);
        }else{
            MenuFormAdmin frame = new MenuFormAdmin();
            frame.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_BBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderPlace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderPlace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderPlace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderPlace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderPlace().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BBack;
    private javax.swing.JButton BOrder;
    private javax.swing.JButton BPlaceOrder;
    private javax.swing.JButton BRemove;
    private javax.swing.JRadioButton RBItemID;
    private javax.swing.JRadioButton RBItemName;
    private javax.swing.JTextField TFQuantity;
    private javax.swing.JTextField TFSearch;
    private javax.swing.JTable TItems;
    private javax.swing.JTable TOrders;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
